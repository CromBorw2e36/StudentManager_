using DevExpress.XtraEditors;
using DevExpress.XtraGrid.Views.Grid;
using DevExpress.XtraReports.UI;
using studentManager_BUS;
using studentManager_DTO;
using studentManager_GUI.Report;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace studentManager_GUI.UI.teacherControl
{
    public partial class teacherUI_ : DevExpress.XtraEditors.XtraUserControl
    {

        private string subjectOld = "";

        private async void fillComboEdit()
        {
            List<String> lst_subject = new List<String>();

            foreach (MONHOC item in (new subjectBUS()).getAllSubject())
            {
                lst_subject.Add(item.TENMON);
            }

            comboEditMONHOC.Properties.Items.AddRange(lst_subject);
            comboEditMONHOC.SelectedIndex = 0;
            subjectOld = comboEditMONHOC.Text;
        }

        public teacherUI_()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSource1.FillAsync();
            dateEditNGAYSINH.DateTime = DateTime.Now;
            fillComboEdit();
            //** Tạo mới ID
            string textID = (new _RandomID()).RandomString(5);
            textEditMAGIAOVIEN.Text = textID;

        }


        public bool checkInput( string magiaovien, string hogiaovien, string tengiaovien,
            DateTime ngaysinh, string diachi, string monhoc)
        {
            _Validate validate = new _Validate();
            if (validate.ValidateText(magiaovien, 0, 5) == 0)
            {
                if (hogiaovien != "")
                {

                    if (tengiaovien != "")
                    {
                        if (diachi != "")
                        {
                            return true;
                            //if (true)
                            //{
                            //    return true;
                            //}
                            //else if (validate.ValidateNumber(sdt) == 1)
                            //{
                            //    MessageBox.Show("Số điện thoại chỉ có 11 số");
                            //}
                            //else if (validate.ValidateNumber(sdt) == -1)
                            //{
                            //    MessageBox.Show("Số điện thoại không có chữ");
                            //}
                            //else
                            //{
                            //    MessageBox.Show("Vui lòng nhập số điện thoại");
                            //}
                        }
                        else
                        {
                            MessageBox.Show("Vui lòng nhập địa chỉ");
                        }
                    }
                    else
                    {
                        MessageBox.Show("Vui lòng nhập tên giảng viên");
                    }
                }
                else
                {
                    MessageBox.Show("Vui lòng nhập họ giảng viên");
                }
            }
            else if (validate.ValidateText(magiaovien, 0, 5) == 1)
            {
                MessageBox.Show("Mã giáo viên chỉ bao gồm 5 kí tự vui lòng kiểm tra lại");
            }
            else if (validate.ValidateText(magiaovien, 0, 5) == -1)
            {
                MessageBox.Show("Vui lòng nhập mã giảng viên");
            }
            return false;
        }


        private void simpleButton1_Click(object sender, EventArgs e)
        {
            string magiaovien = textEditMAGIAOVIEN.Text;
            string hogiaovien = textEditHOGV.Text;
            string tengiaovien = textEditTEN.Text;
            DateTime ngaysinh = dateEditNGAYSINH.DateTime;
            //string sdt = textEditSDT.Text;
            string diachi = textEditDIACHI.Text;
            string monhoc = comboEditMONHOC.Text;

            teacherBUS teacherBUS = new teacherBUS();

            /*
                kiểm tra nếu giáo viên không tồn tại thì *thêm mới;
                nếu giáo viên tồn tại thì *cập nhật
            */
            if (!teacherBUS.issetTeacher(magiaovien))
            {
                if (checkInput(magiaovien, hogiaovien, tengiaovien, ngaysinh,
                    diachi, monhoc));
                {
                    // ** insert vào db giaovien
                    teacherBUS.insTeacher(magiaovien, hogiaovien, tengiaovien, ngaysinh, diachi);
                    // ** insert vào db dayhoc
                    (new teachBUS()).insTeach(magiaovien, monhoc);
                    sqlDataSource1.FillAsync();
                    //** Tạo mới ID
                    string textID = (new _RandomID()).RandomString(5);
                    textEditMAGIAOVIEN.Text = textID;
                }
            }
            else
            {
                if (checkInput(magiaovien, hogiaovien, tengiaovien, ngaysinh,
                     diachi, monhoc));
                {
                    // ** update vào db giaovien
                    teacherBUS.updTeacher(magiaovien, hogiaovien, tengiaovien, ngaysinh, diachi);
                    // ** update vào db dayhoc
                    (new teachBUS()).updTeach(magiaovien, monhoc, subjectOld);
                    sqlDataSource1.FillAsync();
                    //** Tạo mới ID
                    string textID = (new _RandomID()).RandomString(5);
                    textEditMAGIAOVIEN.Text = textID;
                }
            }
            
        }

        private void gridView1_RowClick(object sender, DevExpress.XtraGrid.Views.Grid.RowClickEventArgs e)
        {
            textEditMAGIAOVIEN.Text = (sender as GridView).GetFocusedRowCellValue("Mã giáo viên").ToString();
            textEditHOGV.Text = (sender as GridView).GetFocusedRowCellValue("Họ giáo viên").ToString();
            textEditTEN.Text = (sender as GridView).GetFocusedRowCellValue("Tên giáo viên").ToString();
            textEditDIACHI.Text = (sender as GridView).GetFocusedRowCellValue("Địa chỉ").ToString();
            //textEditSDT.Text = (sender as GridView).GetFocusedRowCellValue("Số điện thoại").ToString();
            try
            {
                dateEditNGAYSINH.DateTime = DateTime.Parse((sender as GridView).GetFocusedRowCellValue("Ngày sinh").ToString());
            }
            catch (Exception ex)
            {
                dateEditNGAYSINH.DateTime = DateTime.Now;
            }

            comboEditMONHOC.SelectedItem = (sender as GridView).GetFocusedRowCellValue("Tên môn học").ToString();
        }

        private void btnDel_Click(object sender, EventArgs e)
        {
            teacherBUS teacher_ = new teacherBUS();
            teachBUS teach_ = new teachBUS();   
            try
            {
                string magiaovien = textEditMAGIAOVIEN.Text;
                if (teacher_.issetTeacher(magiaovien))
                {
                    teacher_.delTeacher(magiaovien);
                    teach_.delTeach(magiaovien);
                }
            }catch(Exception ex)
            {
                Console.WriteLine(ex.ToString());
            }
        }

        private void btnRefresh_Click(object sender, EventArgs e)
        {
            textEditHOGV.Text = "";
            textEditTEN.Text = "";
            textEditDIACHI.Text = "";
            dateEditNGAYSINH.DateTime = DateTime.Now;

            string textID = (new _RandomID()).RandomString(5);
            textEditMAGIAOVIEN.Text = textID;
            sqlDataSource1.FillAsync();
            comboEditMONHOC.Properties.Items.Clear();
            fillComboEdit();
        }

        private void simpleButton4_Click(object sender, EventArgs e)
        {
            teacherReport_ teacherReport_ = new teacherReport_();
            teacherReport_.ShowPreview();
        }

        private void simpleButton5_Click(object sender, EventArgs e)
        {
            using (SaveFileDialog saveDialog = new SaveFileDialog())
            {
                saveDialog.Filter = "Excel (2003)(.xls)|*.xls|Excel (2010) (.xlsx)|*.xlsx |RichText File (.rtf)|*.rtf |Pdf File (.pdf)|*.pdf |Html File (.html)|*.html";
                if (saveDialog.ShowDialog() != DialogResult.Cancel)
                {
                    string exportFilePath = saveDialog.FileName;
                    string fileExtenstion = new FileInfo(exportFilePath).Extension;

                    switch (fileExtenstion)
                    {
                        case ".xls":
                            gridControl1.ExportToXls(exportFilePath);
                            break;
                        case ".xlsx":
                            gridControl1.ExportToXlsx(exportFilePath);
                            break;
                        case ".rtf":
                            gridControl1.ExportToRtf(exportFilePath);
                            break;
                        case ".pdf":
                            gridControl1.ExportToPdf(exportFilePath);
                            break;
                        case ".html":
                            gridControl1.ExportToHtml(exportFilePath);
                            break;
                        case ".mht":
                            gridControl1.ExportToMht(exportFilePath);
                            break;
                        default:
                            break;
                    }

                    if (File.Exists(exportFilePath))
                    {
                        try
                        {
                            //Try to open the file and let windows decide how to open it.
                            System.Diagnostics.Process.Start(exportFilePath);
                        }
                        catch
                        {
                            String msg = "The file could not be opened." + Environment.NewLine + Environment.NewLine + "Path: " + exportFilePath;
                            MessageBox.Show(msg, "Error!", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                    }
                    else
                    {
                        String msg = "The file could not be saved." + Environment.NewLine + Environment.NewLine + "Path: " + exportFilePath;
                        MessageBox.Show(msg, "Error!", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
        }

        private void btnRandID_Click(object sender, EventArgs e)
        {
            string textID = (new _RandomID()).RandomString(5);
            textEditMAGIAOVIEN.Text= textID;
        }
    }
}
