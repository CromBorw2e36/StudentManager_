using DevExpress.XtraEditors;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.Entity;
using studentManager_DTO;
using studentManager_BUS;
using DevExpress.XtraGrid.Views.Grid;
using System.IO;
using studentManager_GUI.Report;
using DevExpress.XtraReports.UI;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.TextBox;

namespace studentManager_GUI.UI.studentsControl
{
    public partial class studentsUI_ : DevExpress.XtraEditors.XtraUserControl
    {
        public studentsUI_()
        {
            InitializeComponent();  
            sqlDataSource1.FillAsync();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource

            textEditMHV.Text = "HV" + (new _RandomID().RandomString(3));
        }

        private void changeBarcode(string _text)
        {
            barCodeControl1.Text = _text;
        }

        // ** kiểm tra tính hợp lệ của input
        private bool check_Validate(string mahv, string hohv, string tenhv, string diachi,
            string sdt, string nghenghiep)
        {
            _Validate _Validate = new _Validate();

            int checkMaHV = _Validate.ValidateText(mahv, 1, 5);
            int checkHoHV = _Validate.ValidateText(hohv, 1, 254);
            int checkTenHV = _Validate.ValidateText(tenhv, 1, 254);
            int checkDiaChi = _Validate.ValidateText(diachi, 1, 100);
            int checkngheNghiep = _Validate.ValidateText(nghenghiep, 1, 250);
            int checkSDT = _Validate.ValidateNumber(sdt);


            if (checkMaHV == 0)
            {
                if (checkHoHV == 0)
                {
                    if (checkTenHV == 0)
                    {
                        if (checkDiaChi == 0)
                        {
                            if (checkSDT == 0)
                            {
                                return true;
                            }
                            else if (checkSDT == 1)
                            {
                                MessageBox.Show("Số điện thoại quá dài", "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }
                            else if (checkSDT == -1)
                            {
                                MessageBox.Show("Vui lòng nhập số điện thoại", "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }
                        }
                        else if (checkDiaChi == 1)
                        {
                            MessageBox.Show("Địa chỉ quá dài", "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                        else if (checkDiaChi == -1)
                        {
                            MessageBox.Show("Vui lòng nhập địa chỉ", "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                    }
                    else if (checkTenHV == 1)
                    {
                        MessageBox.Show("Tên học viên quá dài", "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    else if (checkTenHV == -1)
                    {
                        MessageBox.Show("Vui lòng nhập tên", "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
                else if (checkHoHV == 1)
                {
                    MessageBox.Show("Họ của học viên quá dài", "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                else if (checkHoHV == -1)
                {
                    MessageBox.Show("Vui lòng nhập họ", "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            else if (checkMaHV == 1)
            {
                MessageBox.Show("Mã học viên quá dài", "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else if (checkMaHV == -1)
            {
                MessageBox.Show("Vui lòng nhập mã học viên", "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            return false;
        }

        private void btnSAVE_Click(object sender, EventArgs e)
        {
            string mahv = textEditMHV.Text;
            string hohv = textEditFRISTNAME.Text;
            string tenhv = textEditLASTNAME.Text;
            string diachi = textEditDIACHI.Text;
            string nghennghiep = comboEditNGHENGHIEP.Text;
            string sdt = textEditSDT.Text;
            DateTime ngaysinh = dateEditNGAYSINH.DateTime;
            
            studentsBUS studentsBUS = new studentsBUS();
            
            if(check_Validate(mahv, hohv, tenhv, diachi, sdt, nghennghiep))
            {
                // ** kiểm tra không tồn tại thì insert - ngược làị update
                if (!(studentsBUS.issetStudents(mahv)))
                {
                    studentsBUS.insStudent(mahv, hohv, tenhv, ngaysinh, diachi, sdt, nghennghiep);
                }
                else
                {
                    studentsBUS.updStudent(mahv, hohv, tenhv, ngaysinh, diachi, sdt, nghennghiep);
                }
                sqlDataSource1.FillAsync();
            }
        }

        private void btnDEL_Click(object sender, EventArgs e)
        {
            string mahv = textEditMHV.Text;
            if((new _Validate()).ValidateText(mahv, 1, 5) == 0) 
            {
                DialogResult result = MessageBox.Show("Xác nhận xóa?", "Xác nhận", MessageBoxButtons.OKCancel, MessageBoxIcon.Warning);
                if (result == DialogResult.OK)
                {
                    studentsBUS studentsBUS = new studentsBUS();
                    studentsBUS.delStudent(mahv);
                    sqlDataSource1.FillAsync();
                }
            }
            else
            {
                MessageBox.Show("Vui lòng nhập chính xác mã học viên", "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }



        private void btnREFRESH_Click(object sender, EventArgs e)
        {
            textEditMHV.Text = "HV" + (new _RandomID().RandomString(3));
            textEditFRISTNAME.Text = "";
            textEditLASTNAME.Text = "";
            textEditDIACHI.Text = "";
            comboEditNGHENGHIEP.SelectedIndex = 0;
            textEditSDT.Text = "";
            dateEditNGAYSINH.DateTime = DateTime.Now;

            barCodeControl1.Text = textEditMHV.Text;
            sqlDataSource1.FillAsync();
        }

        private void simpleButton1_Click(object sender, EventArgs e)
        {
            string textID = "HV" + (new _RandomID().RandomString(3));
            textEditMHV.Text = textID;
            changeBarcode(textID);
        }

        private void gridView1_RowClick(object sender, DevExpress.XtraGrid.Views.Grid.RowClickEventArgs e)
        {
            textEditMHV.Text = (sender as GridView).GetFocusedRowCellValue("Mã học viên").ToString();
            changeBarcode(textEditMHV.Text);
            textEditFRISTNAME.Text = (sender as GridView).GetFocusedRowCellValue("Họ học viên").ToString();
            textEditLASTNAME.Text = (sender as GridView).GetFocusedRowCellValue("Tên học viên").ToString();
            textEditDIACHI.Text = (sender as GridView).GetFocusedRowCellValue("Địa chỉ").ToString();
            comboEditNGHENGHIEP.SelectedText = (sender as GridView).GetFocusedRowCellValue("Nghề nghiệp").ToString();
            textEditSDT.Text = (sender as GridView).GetFocusedRowCellValue("Số điện thoại").ToString();
            dateEditNGAYSINH.DateTime = DateTime.Parse((sender as GridView).GetFocusedRowCellValue("Ngày sinh").ToString());
        }

        private void simpleButton4_Click(object sender, EventArgs e)
        {
            using (SaveFileDialog saveDialog = new SaveFileDialog())
            {
                saveDialog.Filter = "Excel (2003)(.xls)|*.xls|Excel (2010) (.xlsx)|*.xlsx |RichText File (.rtf)|*.rtf |Pdf File (.pdf)|*.pdf |Html File (.html)|*.html";
                if (saveDialog.ShowDialog() != DialogResult.Cancel)
                {
                    string exportFilePath = saveDialog.FileName;
                    string fileExtenstion = new FileInfo(exportFilePath).Extension;

                    switch (fileExtenstion)
                    {
                        case ".xls":
                            gridControl1.ExportToXls(exportFilePath);
                            break;
                        case ".xlsx":
                            gridControl1.ExportToXlsx(exportFilePath);
                            break;
                        case ".rtf":
                            gridControl1.ExportToRtf(exportFilePath);
                            break;
                        case ".pdf":
                            gridControl1.ExportToPdf(exportFilePath);
                            break;
                        case ".html":
                            gridControl1.ExportToHtml(exportFilePath);
                            break;
                        case ".mht":
                            gridControl1.ExportToMht(exportFilePath);
                            break;
                        default:
                            break;
                    }

                    if (File.Exists(exportFilePath))
                    {
                        try
                        {
                            //Try to open the file and let windows decide how to open it.
                            System.Diagnostics.Process.Start(exportFilePath);
                        }
                        catch
                        {
                            String msg = "The file could not be opened." + Environment.NewLine + Environment.NewLine + "Path: " + exportFilePath;
                            MessageBox.Show(msg, "Error!", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                    }
                    else
                    {
                        String msg = "The file could not be saved." + Environment.NewLine + Environment.NewLine + "Path: " + exportFilePath;
                        MessageBox.Show(msg, "Error!", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
        }

        private void simpleButton5_Click(object sender, EventArgs e)
        {
            studentsReport_ studentsReport_ = new studentsReport_();
            studentsReport_.ShowPreview();
        }

        private void barCodeControl1_Click(object sender, EventArgs e)
        {

        }

        private void textEditMHV_Properties_KeyUp(object sender, KeyEventArgs e)
        {
            barCodeControl1.Text = textEditMHV.Text;
        }
    }
}
